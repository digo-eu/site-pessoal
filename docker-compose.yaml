name: site-pessoal

services:
# NGINX proxy, server and load balancer to manage the internal network
  nginx:
    container_name: nginx
    image: nginx
    ports: 
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./hosted_webapps/:/usr/share/nginx/html/
    secrets:
      - source: nginx_cert
        target: /etc/ssl/cert.pem
      - source: nginx_key
        target: /etc/ssl/cert.key
    networks:
      - sitewide
      - db-access
    restart: unless-stopped

# PostGIS enabled PostgreSQL implementation
  db:
    container_name: db
    build:
      context: .
      dockerfile_inline: |
        FROM postgis/postgis
        RUN localedef -i pt_BR -c -f utf8 -A /usr/share/locale/locale.alias pt_BR.utf8
        ENV LANG pt_BR.utf8
    environment:
      POSTGRES_PASSWORD: ${DEFAULT_PASSWORD}
    volumes:
      - type: bind
        source: ./db_data/
        target: /var/lib/postgresql/data/
    shm_size: 2gb
    ports:
      - 82:5432
    networks:
      - db-access
    restart: always

# Admin interface for PostgreSQL
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
    ports:
      - 81:80
    networks:
      - db-access
#   The following is needed to access a dump file for restoration from the pgadmin client
#   Substitute <EMAIL> with the PGADMIN_DEFAULT_EMAIL value but with "_" instead of "@"
#   volumes:
#     - ./db.sql:/var/lib/pgadmin/storage/<EMAIL>/db.sql

# Homepage based on the t3 stack
  homepage:
    container_name: homepage
    build:
      context: https://github.com/digo-eu/homepage.git
      args:
        NEXT_PUBLIC_CLIENTVAR: "clientvar"
        NEXT_PUBLIC_POSTHOG_KEY: ${NEXT_PUBLIC_POSTHOG_KEY}
        NEXT_PUBLIC_POSTHOG_HOST: ${NEXT_PUBLIC_POSTHOG_HOST}
        DATABASE_URL: db
    working_dir: /app
    networks:
      - sitewide
      - db-access
      
# Air server for a Go app
  air:
    container_name: air
    image: cosmtrek/air
    working_dir: /air-server/
    volumes:
      - ./air-server/:/air-server/
    networks:
      - sitewide

# Geoserver implementation for serving maps online
  geoserver:
    container_name: geoserver
    image: docker.osgeo.org/geoserver:2.25.x
    environment:
      - SKIP_DEMO_DATA=true
    volumes:
      - type: bind
        source: ./geoserver_data/ 
        target: /opt/geoserver_data/
      - type: bind
        source: ./tomcat_config.xml 
        target: /opt/config_overrides/web.xml
    networks:
      - sitewide
      - db-access
    restart: unless-stopped
        
networks:
  sitewide:
    driver: bridge
  db-access:
    driver: bridge

secrets:
  nginx_cert:
    file: ./certs/cert.pem
  nginx_key:
    file: ./certs/cert.key
